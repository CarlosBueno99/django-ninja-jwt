{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ninja JWT","text":"<p>A JSON Web Token authentication plugin for the Django Ninja REST Framework.</p> <p>Ninja JWT provides a JSON Web Token authentication backend for the Django REST Framework. It aims to cover the most common use cases of JWTs by offering a conservative set of default features. It also aims to be easily extensible in case a desired feature is not present.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>This project borrows code from the SIMPLE JWT to implement Json Web Token for Django Ninja REST Framework. However, I have included SIMPLE JWT license to the <code>license</code> folder.</p>"},{"location":"auth_integration/","title":"Route Authentication","text":"<p>Ninja JWT uses Django Ninja <code>HttpBearer</code> as a way to authenticate users reaching your api endpoint. Authenticated user can be found in <code>request.user</code> or <code>request.auth</code></p>"},{"location":"auth_integration/#route-authentication-class-based","title":"Route Authentication - Class Based","text":"<pre><code>from ninja_extra import api_controller, route\nfrom ninja_jwt.authentication import JWTAuth\n\n@api_controller\nclass MyController:\n    @route.get('/some-endpoint', auth=JWTAuth())\n    def some_endpoint(self):\n        ...\n</code></pre>"},{"location":"auth_integration/#route-authentication-function-based","title":"Route Authentication - Function Based","text":"<pre><code>from ninja import router\nfrom ninja_jwt.authentication import JWTAuth\n\nrouter = router('')\n\n@router.get('/some-endpoint', auth=JWTAuth())\ndef some_endpoint(self):\n    ...\n</code></pre>"},{"location":"auth_integration/#custom-auth-implement","title":"Custom Auth Implement","text":"<p>If you wish to use a different implementation of <code>JWTAuth</code>, then you need to inherit from <code>JWTBaseAuthentication</code>. Please read more on Django Ninja - Authentication, if you want to use a different approach that is not <code>bearer</code>.</p> <p>example: <pre><code>from ninja.security import APIKeyHeader\nfrom ninja_jwt.authentication import JWTBaseAuthentication\nfrom ninja import router\n\nclass ApiKey(APIKeyHeader, JWTBaseAuthentication):\n    param_name = \"X-API-Key\"\n\n    def authenticate(self, request, key):\n        return self.jwt_authenticate(request, token=key)\n\n\nheader_key = ApiKey()\nrouter = router('')\n\n@router.get(\"/headerkey\", auth=header_key)\ndef apikey(request):\n    return f\"Token = {request.auth}\"\n</code></pre></p>"},{"location":"auth_integration/#asynchronous-route-authentication","title":"Asynchronous Route Authentication","text":"<p>If you are interested in the Asynchronous Route Authentication, there is <code>AsyncJWTAuth</code> class</p> <p><pre><code>from ninja_extra import api_controller, route\nfrom ninja_jwt.authentication import AsyncJWTAuth\n\n@api_controller\nclass MyController:\n    @route.get('/some-endpoint', auth=AsyncJWTAuth())\n    async def some_endpoint(self):\n        ...\n</code></pre> N:B <code>some_endpoint</code> must be asynchronous. Any endpoint function marked with <code>AsyncJWTAuth</code> must be asynchronous. </p> <p>Warning</p> <p>Asynchronous feature is only available for django version &gt; 3.0</p>"},{"location":"blacklist_app/","title":"Blacklist App","text":"<p>Ninja JWT includes an app that provides token blacklist functionality. To use this app, include it in your list of installed apps in <code>settings.py</code>:</p> <pre><code># Django project settings.py\n\n...\n\nINSTALLED_APPS = (\n    ...\n    'ninja_jwt.token_blacklist',\n    ...\n)\n</code></pre> <p>Also, make sure to run <code>python manage.py migrate</code> to run the app\\'s migrations.</p> <p>If the blacklist app is detected in <code>INSTALLED_APPS</code>, Ninja JWT will add any generated refresh or sliding tokens to a list of outstanding tokens. It will also check that any refresh or sliding token does not appear in a blacklist of tokens before it considers it as valid.</p> <p>The Ninja JWT blacklist app implements its outstanding and blacklisted token lists using two models: <code>OutstandingToken</code> and <code>BlacklistedToken</code>. Model admins are defined for both of these models. To add a token to the blacklist, find its corresponding <code>OutstandingToken</code> record in the admin and use the admin again to create a <code>BlacklistedToken</code> record that points to the <code>OutstandingToken</code> record.</p> <p>Alternatively, you can blacklist a token by creating a <code>BlacklistMixin</code> subclass instance and calling the instance's <code>blacklist</code> method:</p> <pre><code>from ninja_jwt.tokens import RefreshToken\n\ntoken = RefreshToken(base64_encoded_token_string)\ntoken.blacklist()\n</code></pre> <p>This will create unique outstanding token and blacklist records for the token's <code>jti</code> claim or whichever claim is specified by the <code>JTI_CLAIM</code> setting.</p> <p>The blacklist app also provides a management command, <code>flushexpiredtokens</code>, which will delete any tokens from the outstanding list and blacklist that have expired. You should set up a cron job on your server or hosting platform which runs this command daily.</p>"},{"location":"creating_tokens_manually/","title":"Creating Token Manually","text":"<p>Sometimes, you may wish to manually create a token for a user. This could be done as follows:</p> <pre><code>from ninja_jwt.tokens import RefreshToken\n\ndef get_tokens_for_user(user):\n    refresh = RefreshToken.for_user(user)\n\n    return {\n        'refresh': str(refresh),\n        'access': str(refresh.access_token),\n    }\n</code></pre> <p>The above function <code>get_tokens_for_user</code> will return the serialized representations of new refresh and access tokens for the given user. In general, a token for any subclass of <code>ninja_jwt.tokens.Token</code> can be created in this way.</p>"},{"location":"customizing_token_claims/","title":"Customizing Token Claims","text":"<p>If you wish to customize the claims contained in web tokens which are generated by the <code>NinjaJWTDefaultController</code> and <code>NinjaJWTSlidingController</code> views, create a subclass for the desired controller as well as a subclass for its corresponding serializer. Here\\'s an example :</p> <p>Info</p> <p>if you are interested in Asynchronous version of the class, use <code>AsyncNinjaJWTDefaultController</code> and <code>AsyncNinjaJWTSlidingController</code>. Also note, it's only available for Django versions that supports asynchronous actions.</p> <pre><code>from ninja_jwt.schema import TokenObtainPairInputSchema\nfrom ninja_jwt.controller import TokenObtainPairController\nfrom ninja_extra import api_controller, route\nfrom ninja import Schema\n\n\nclass UserSchema(Schema):\n    first_name: str\n    email: str\n\n\nclass MyTokenObtainPairOutSchema(Schema):\n    refresh: str\n    access: str\n    user: UserSchema\n\n\nclass MyTokenObtainPairSchema(TokenObtainPairInputSchema):\n    def output_schema(self):\n        out_dict = self.dict(exclude={\"password\"})\n        out_dict.update(user=UserSchema.from_orm(self._user))\n        return MyTokenObtainPairOutSchema(**out_dict)\n\n\n@api_controller('/token', tags=['Auth'])\nclass MyTokenObtainPairController(TokenObtainPairController):\n    @route.post(\n        \"/pair\", response=MyTokenObtainPairOutSchema, url_name=\"token_obtain_pair\"\n    )\n    def obtain_token(self, user_token: MyTokenObtainPairSchema):\n        return user_token.output_schema()\n</code></pre> <p>As with the standard controller, you\\'ll also need to include register the controller as shown in <code>getting_started</code></p>"},{"location":"customizing_token_claims/#use-django-ninja-router","title":"Use Django Ninja Router","text":"<p>If you interested in using functions rather than classes, then you are also covered. Here is an example</p> <pre><code>from ninja_jwt.routers.blacklist import blacklist_router\nfrom ninja_jwt.routers.obtain import obtain_pair_router, sliding_router\nfrom ninja_jwt.routers.verify import verify_router\n</code></pre> <p>Register the <code>router</code> to the django-ninja <code>api</code> like so:</p> <pre><code>from ninja import NinjaAPI\n\napi = NinjaAPI()\napi.add_router('/token', tags=['Auth'], router=obtain_pair_router)\n...\n</code></pre> <p>If you are interested in customize the token claims, you can do so by creating a subclass of <code>TokenObtainPairInputSchema</code> and <code>TokenObtainPairController</code>. See Controller Schema Swapping</p> <p>Also, its important to note that <code>NinjaExtra</code> registers a handler for <code>APIException</code> class which is not available in <code>NinjaAPI</code> instance. To fix that, you need the extra code below:</p> <pre><code>from ninja import NinjaAPI\nfrom ninja_extra import exceptions\n\napi = NinjaAPI()\napi.add_router('', tags=['Auth'], router=router)\n\ndef api_exception_handler(request, exc):\n    headers = {}\n\n    if isinstance(exc.detail, (list, dict)):\n        data = exc.detail\n    else:\n        data = {\"detail\": exc.detail}\n\n    response = api.create_response(request, data, status=exc.status_code)\n    for k, v in headers.items():\n        response.setdefault(k, v)\n\n    return response\n\napi.exception_handler(exceptions.APIException)(api_exception_handler)\n</code></pre>"},{"location":"customizing_token_claims/#controller-schema-swapping","title":"Controller Schema Swapping","text":"<p>You can now swap controller schema in <code>NINJA_JWT</code> settings without having to inherit or override Ninja JWT controller function.</p> <p>All controller input schema must inherit from <code>ninja_jwt.schema.InputSchemaMixin</code> and token generating schema should inherit from <code>ninja_jwt.schema.TokenObtainInputSchemaBase</code> or <code>ninja_jwt.schema.TokenInputSchemaMixin</code> if you want to have more control.</p> <p>Using the example above:</p> <pre><code># project/schema.py\nfrom typing import Type, Dict\nfrom ninja_jwt.schema import TokenObtainInputSchemaBase\nfrom ninja import Schema\nfrom ninja_jwt.tokens import RefreshToken\n\nclass UserSchema(Schema):\n    first_name: str\n    email: str\n\n\nclass MyTokenObtainPairOutSchema(Schema):\n    refresh: str\n    access: str\n    user: UserSchema\n\n\nclass MyTokenObtainPairInputSchema(TokenObtainInputSchemaBase):\n    @classmethod\n    def get_response_schema(cls) -&gt; Type[Schema]:\n        return MyTokenObtainPairOutSchema\n\n    @classmethod\n    def get_token(cls, user) -&gt; Dict:\n        values = {}\n        refresh = RefreshToken.for_user(user)\n        values[\"refresh\"] = str(refresh)\n        values[\"access\"] = str(refresh.access_token)\n        values.update(user=UserSchema.from_orm(user)) # this will be needed when creating output schema\n        return values\n</code></pre> <p>In the <code>MyTokenObtainPairInputSchema</code> we override <code>get_token</code> to define our token and some data needed for our output schema. We also override <code>get_response_schema</code> to define our output schema <code>MyTokenObtainPairOutSchema</code>.</p> <p>Next, we apply the <code>MyTokenObtainPairInputSchema</code> schema to controller. This is simply done in <code>NINJA_JWT</code> settings.</p> <p><pre><code># project/settings.py\n\nNINJA_JWT = {\n    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': 'project.schema.MyTokenObtainPairInputSchema',\n}\n</code></pre> Other swappable schemas can be follow as shown below: <pre><code># project/settings.py\n\nNINJA_JWT = {\n    # FOR OBTAIN PAIR\n    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': \"project.schema.MyTokenObtainPairInputSchema\",\n    'TOKEN_OBTAIN_PAIR_REFRESH_INPUT_SCHEMA': \"for.obtain_pair.refresh_input.schema\",\n    # FOR SLIDING TOKEN\n    'TOKEN_OBTAIN_SLIDING_INPUT_SCHEMA':  \"for.obtain_sliding.input.schema\",\n    'TOKEN_OBTAIN_SLIDING_REFRESH_INPUT_SCHEMA': \"for.obtain_pair.refresh_input.schema\",\n\n    'TOKEN_BLACKLIST_INPUT_SCHEMA':  \"for.blacklist_input.schema\",\n    'TOKEN_VERIFY_INPUT_SCHEMA':  \"for.verify_input.schema\",\n}\n</code></pre></p> <p></p> <p>Note</p> <p><code>Controller Schema Swapping</code> is only available from v5.2.4</p>"},{"location":"development_and_contributing/","title":"Development and Contributing","text":"<p>To do development work for Ninja JWT, make your own fork on Github, clone it locally, make and activate a virtualenv for it, then from within the project directory:</p> <p>After that, install flit</p> <pre><code>$(venv) pip install flit\n</code></pre> <p>Install development libraries and pre-commit hooks for code linting and styles</p> <pre><code>$(venv) make install\n</code></pre> <p>To run the tests:</p> <pre><code>$(venv) make test\n</code></pre> <p>To run the tests with coverage:</p> <pre><code>$(venv) make test-cov\n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.6</li> <li>Django &gt;= 2.1</li> <li>Django-Ninja &gt;= 0.16.1</li> <li>Django-Ninja-Extra &gt;= 0.11.0</li> </ul> <p>These are the officially supported python and package versions. Other versions will probably work. You 're free to modify the tox config and see what is possible.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Ninja JWT can be installed with pip:</p> <pre><code>pip install django-ninja-jwt\n</code></pre> <p>Also, you need to register <code>NinjaJWTDefaultController</code> controller to you Django-Ninja api. The <code>NinjaJWTDefaultController</code> comes with three routes <code>obtain_token</code>, <code>refresh_token</code> and <code>verify_token</code></p> <pre><code>from ninja_jwt.controller import NinjaJWTDefaultController\nfrom ninja_extra import NinjaExtraAPI\n\napi = NinjaExtraAPI()\napi.register_controllers(NinjaJWTDefaultController)\n</code></pre> <p>The <code>NinjaJWTDefaultController</code> comes with three routes <code>obtain_token</code>, <code>refresh_token</code> and <code>verify_token</code>.  It is a combination of two subclass <code>TokenVerificationController</code> and <code>TokenObtainPairController</code>. If you wish to customize these routes, you can inherit from these controllers and change its implementation</p> <pre><code>from ninja_extra import api_controller\nfrom ninja_jwt.controller import TokenObtainPairController\n\n@api_controller('token', tags=['Auth'])\nclass MyCustomController(TokenObtainPairController):\n    \"\"\"obtain_token and refresh_token only\"\n...\napi.register_controllers(MyCustomController)\n</code></pre> <p>If you wish to use localizations/translations, simply add <code>ninja_jwt</code> to <code>INSTALLED_APPS</code>.</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'ninja_jwt',\n    ...\n]\n</code></pre>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>To verify that Ninja JWT is working, you can use curl to issue a couple of test requests:</p> <pre><code>curl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"davidattenborough\", \"password\": \"boatymcboatface\"}' \\\n  http://localhost:8000/api/token/pair\n\n...\n{\n  \"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNDU2LCJqdGkiOiJmZDJmOWQ1ZTFhN2M0MmU4OTQ5MzVlMzYyYmNhOGJjYSJ9.NHlztMGER7UADHZJlxNG0WSi22a2KaYSfd1S-AuT7lU\",\n  \"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImNvbGRfc3R1ZmYiOiLimIMiLCJleHAiOjIzNDU2NywianRpIjoiZGUxMmY0ZTY3MDY4NDI3ODg5ZjE1YWMyNzcwZGEwNTEifQ.aEoAYkSJjoWH1boshQAaTkf8G3yn0kapko6HFRt7Rh4\"\n}\n</code></pre> <p>You can use the returned access token to prove authentication for a protected view:</p> <pre><code>curl \\\n  -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNDU2LCJqdGkiOiJmZDJmOWQ1ZTFhN2M0MmU4OTQ5MzVlMzYyYmNhOGJjYSJ9.NHlztMGER7UADHZJlxNG0WSi22a2KaYSfd1S-AuT7lU\" \\\n  http://localhost:8000/api/some-protected-view/\n</code></pre> <p>When this short-lived access token expires, you can use the longer-lived refresh token to obtain another access token:</p> <pre><code>curl \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImNvbGRfc3R1ZmYiOiLimIMiLCJleHAiOjIzNDU2NywianRpIjoiZGUxMmY0ZTY3MDY4NDI3ODg5ZjE1YWMyNzcwZGEwNTEifQ.aEoAYkSJjoWH1boshQAaTkf8G3yn0kapko6HFRt7Rh4\"}' \\\n  http://localhost:8000/api/token/refresh/\n\n...\n{\"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNTY3LCJqdGkiOiJjNzE4ZTVkNjgzZWQ0NTQyYTU0NWJkM2VmMGI0ZGQ0ZSJ9.ekxRxgb9OKmHkfy-zs1Ro_xs1eMLXiR17dIDBVxeT-w\"}\n</code></pre>"},{"location":"getting_started/#cryptographic-dependencies-optional","title":"Cryptographic Dependencies (Optional)","text":"<p>If you are planning on encoding or decoding tokens using certain digital signature algorithms (i.e. RSA and ECDSA; visit PyJWT for other algorithms), you will need to install the cryptography_ library. This can be installed explicitly, or as a required extra in the <code>django-ninja-jwt</code> requirement:</p> <pre><code>pip install django-ninja-jwt[crypto]\n</code></pre> <p>The <code>django-ninja-jwt[crypto]</code> format is recommended in requirements files in projects using <code>Ninja JWT</code>, as a separate <code>cryptography</code> requirement line may later be mistaken for an unused requirement and removed. cryptography</p>"},{"location":"settings/","title":"Settings","text":"<p>Some of Ninja JWT's behavior can be customized through settings variables in <code>settings.py</code>:</p> <pre><code># Django project settings.py\n\nfrom datetime import timedelta\nfrom django.conf import settings\n...\n\nNINJA_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': False,\n    'UPDATE_LAST_LOGIN': False,\n\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': settings.SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,\n    'ISSUER': None,\n    'JWK_URL': None,\n    'LEEWAY': 0,\n\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'USER_AUTHENTICATION_RULE': 'ninja_jwt.authentication.default_user_authentication_rule',\n\n    'AUTH_TOKEN_CLASSES': ('ninja_jwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'TOKEN_USER_CLASS': 'ninja_jwt.models.TokenUser',\n\n    'JTI_CLAIM': 'jti',\n\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n\n    # For Controller Schemas\n    # FOR OBTAIN PAIR\n    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': \"ninja_jwt.schema.TokenObtainPairInputSchema\",\n    'TOKEN_OBTAIN_PAIR_REFRESH_INPUT_SCHEMA': \"ninja_jwt.schema.TokenRefreshInputSchema\",\n    # FOR SLIDING TOKEN\n    'TOKEN_OBTAIN_SLIDING_INPUT_SCHEMA': \"ninja_jwt.schema.TokenObtainSlidingInputSchema\",\n    'TOKEN_OBTAIN_SLIDING_REFRESH_INPUT_SCHEMA':\"ninja_jwt.schema.TokenRefreshSlidingInputSchema\",\n\n    'TOKEN_BLACKLIST_INPUT_SCHEMA': \"ninja_jwt.schema.TokenBlacklistInputSchema\",\n    'TOKEN_VERIFY_INPUT_SCHEMA': \"ninja_jwt.schema.TokenVerifyInputSchema\",\n}\n</code></pre> <p>Above, the default values for these settings are shown.</p>"},{"location":"settings/#access_token_lifetime","title":"<code>ACCESS_TOKEN_LIFETIME</code>","text":"<p>A <code>datetime.timedelta</code> object which specifies how long access tokens are valid. This <code>timedelta</code> value is added to the current UTC time during token generation to obtain the token's default <code>exp</code> claim value.</p>"},{"location":"settings/#refresh_token_lifetime","title":"<code>REFRESH_TOKEN_LIFETIME</code>","text":"<p>A <code>datetime.timedelta</code> object which specifies how long refresh tokens are valid. This <code>timedelta</code> value is added to the current UTC time during token generation to obtain the token's default <code>exp</code> claim value.</p>"},{"location":"settings/#blacklist_after_rotation","title":"<code>BLACKLIST_AFTER_ROTATION</code>","text":"<p>When set to <code>True</code>, causes refresh tokens submitted to the <code>TokenRefreshView</code> to be added to the blacklist if the blacklist app is in use and the <code>ROTATE_REFRESH_TOKENS</code> setting is set to <code>True</code>. You need to add <code>'ninja_jwt.token_blacklist',</code> to your  <code>INSTALLED_APPS</code> in the settings file to use this setting.</p> <p>Learn more about <code>/blacklist_app</code>{.interpreted-text role=\"doc\"}.</p>"},{"location":"settings/#update_last_login","title":"<code>UPDATE_LAST_LOGIN</code>","text":"<p>When set to <code>True</code>, last_login field in the auth_user table is updated upon login (TokenObtainPairView).</p> <pre><code>Warning: Updating last_login will dramatically increase the number of database\ntransactions. People abusing the views could slow the server and this could be\na security vulnerability. If you really want this, throttle the endpoint with\nDRF at the very least.\n</code></pre>"},{"location":"settings/#algorithm","title":"<code>ALGORITHM</code>","text":"<p>The algorithm from the PyJWT library which will be used to perform signing/verification operations on tokens.  To use symmetric HMAC signing and verification, the following algorithms may be used: <code>'HS256'</code>, <code>'HS384'</code>, <code>'HS512'</code>.  When an HMAC algorithm is chosen, the <code>SIGNING_KEY</code> setting will be used as both the signing key and the verifying key.  In that case, the <code>VERIFYING_KEY</code> setting will be ignored.  To use asymmetric RSA signing and verification, the following algorithms may be used: <code>'RS256'</code>, <code>'RS384'</code>, <code>'RS512'</code>.  When an RSA algorithm is chosen, the <code>SIGNING_KEY</code> setting must be set to a string that contains an RSA private key.  Likewise, the <code>VERIFYING_KEY</code> setting must be set to a string that contains an RSA public key.</p>"},{"location":"settings/#signing_key","title":"<code>SIGNING_KEY</code>","text":"<p>The signing key that is used to sign the content of generated tokens.  For HMAC signing, this should be a random string with at least as many bits of data as is required by the signing protocol.  For RSA signing, this should be a string that contains an RSA private key that is 2048 bits or longer.  Since Simple JWT defaults to using 256-bit HMAC signing, the <code>SIGNING_KEY</code> setting defaults to the value of the <code>SECRET_KEY</code> setting for your django project.  Although this is the most reasonable default that Simple JWT can provide, it is recommended that developers change this setting to a value that is independent from the django project secret key.  This will make changing the signing key used for tokens easier in the event that it is compromised.</p>"},{"location":"settings/#verifying_key","title":"<code>VERIFYING_KEY</code>","text":"<p>The verifying key which is used to verify the content of generated tokens.  If an HMAC algorithm has been specified by the <code>ALGORITHM</code> setting, the <code>VERIFYING_KEY</code> setting will be ignored and the value of the <code>SIGNING_KEY</code> setting will be used.  If an RSA algorithm has been specified by the <code>ALGORITHM</code> setting, the <code>VERIFYING_KEY</code> setting must be set to a string that contains an RSA public key.</p>"},{"location":"settings/#audience","title":"<code>AUDIENCE</code>","text":"<p>The audience claim to be included in generated tokens and/or validated in decoded tokens. When set to <code>None</code>, this field is excluded from tokens and is not validated.</p>"},{"location":"settings/#issuer","title":"<code>ISSUER</code>","text":"<p>The issuer claim to be included in generated tokens and/or validated in decoded tokens. When set to <code>None</code>, this field is excluded from tokens and is not validated.</p>"},{"location":"settings/#jwk_url","title":"<code>JWK_URL</code>","text":"<p>The JWK_URL is used to dynamically resolve the public keys needed to verify the signing of tokens. When using Auth0 for example you might set this to 'https://yourdomain.auth0.com/.well-known/jwks.json'. When set to <code>None</code>, this field is excluded from the token backend and is not used during validation.</p>"},{"location":"settings/#leeway","title":"<code>LEEWAY</code>","text":"<p>Leeway is used to give some margin to the expiration time. This can be an integer for seconds or a <code>datetime.timedelta</code>. Please reference https://pyjwt.readthedocs.io/en/latest/usage.html#expiration-time-claim-exp for more information.</p>"},{"location":"settings/#auth_header_types","title":"<code>AUTH_HEADER_TYPES</code>","text":"<p>The authorization header type(s) that will be accepted for views that require authentication.  For example, a value of <code>'Bearer'</code> means that views requiring authentication would look for a header with the following format: <code>Authorization: Bearer &lt;token&gt;</code>.  This setting may also contain a list or tuple of possible header types (e.g. <code>('Bearer', 'JWT')</code>).  If a list or tuple is used in this way, and authentication fails, the first item in the collection will be used to build the \"WWW-Authenticate\" header in the response.</p>"},{"location":"settings/#auth_header_name","title":"<code>AUTH_HEADER_NAME</code>","text":"<p>The authorization header name to be used for authentication. The default is <code>HTTP_AUTHORIZATION</code> which will accept the <code>Authorization</code> header in the request. For example if you'd like to use <code>X_Access_Token</code> in the header of your requests please specify the <code>AUTH_HEADER_NAME</code> to be <code>HTTP_X_ACCESS_TOKEN</code> in your settings.</p>"},{"location":"settings/#user_id_field","title":"<code>USER_ID_FIELD</code>","text":"<p>The database field from the user model that will be included in generated tokens to identify users.  It is recommended that the value of this setting specifies a field that does not normally change once its initial value is chosen.  For example, specifying a \"username\" or \"email\" field would be a poor choice since an account's username or email might change depending on how account management in a given service is designed.  This could allow a new account to be created with an old username while an existing token is still valid which uses that username as a user identifier.</p>"},{"location":"settings/#user_id_claim","title":"<code>USER_ID_CLAIM</code>","text":"<p>The claim in generated tokens which will be used to store user identifiers. For example, a setting value of <code>'user_id'</code> would mean generated tokens include a \"user_id\" claim that contains the user's identifier.</p>"},{"location":"settings/#user_authentication_rule","title":"<code>USER_AUTHENTICATION_RULE</code>","text":"<p>Callable to determine if the user is permitted to authenticate. This rule is applied after a valid token is processed. The user object is passed to the callable as an argument. The default rule is to check that the <code>is_active</code> flag is still <code>True</code>. The callable must return a boolean, <code>True</code> if authorized, <code>False</code> otherwise resulting in a 401 status code.</p>"},{"location":"settings/#auth_token_classes","title":"<code>AUTH_TOKEN_CLASSES</code>","text":"<p>A list of dot paths to classes that specify the types of token that are allowed to prove authentication.  More about this in the \"Token types\" section below.</p>"},{"location":"settings/#token_type_claim","title":"<code>TOKEN_TYPE_CLAIM</code>","text":"<p>The claim name that is used to store a token's type.  More about this in the \"Token types\" section below.</p>"},{"location":"settings/#jti_claim","title":"<code>JTI_CLAIM</code>","text":"<p>The claim name that is used to store a token's unique identifier.  This identifier is used to identify revoked tokens in the blacklist app.  It may be necessary in some cases to use another claim besides the default \"jti\" claim to store such a value.</p>"},{"location":"settings/#token_user_class","title":"<code>TOKEN_USER_CLASS</code>","text":"<p>A stateless user object which is backed by a validated token. Used only for the JWTStatelessUserAuthentication authentication backend. The value is a dotted path to your subclass of <code>rest_framework_simplejwt.models.TokenUser</code>, which also is the default.</p>"},{"location":"settings/#sliding_token_lifetime","title":"<code>SLIDING_TOKEN_LIFETIME</code>","text":"<p>A <code>datetime.timedelta</code> object which specifies how long sliding tokens are valid to prove authentication.  This <code>timedelta</code> value is added to the current UTC time during token generation to obtain the token's default \"exp\" claim value.  More about this in the \"Sliding tokens\" section below.</p>"},{"location":"settings/#sliding_token_refresh_lifetime","title":"<code>SLIDING_TOKEN_REFRESH_LIFETIME</code>","text":"<p>A <code>datetime.timedelta</code> object which specifies how long sliding tokens are valid to be refreshed.  This <code>timedelta</code> value is added to the current UTC time during token generation to obtain the token's default \"exp\" claim value. More about this in the \"Sliding tokens\" section below.</p>"},{"location":"settings/#sliding_token_refresh_exp_claim","title":"<code>SLIDING_TOKEN_REFRESH_EXP_CLAIM</code>","text":"<p>The claim name that is used to store the expiration time of a sliding token's refresh period.  More about this in the \"Sliding tokens\" section below.</p>"},{"location":"token_types/","title":"Token Types","text":"<p>Ninja JWT provides two different token types that can be used to prove authentication. In a token's payload, its type can be identified by the value of its token type claim, which is <code>token_type</code> by default. This may have a value of <code>access</code>, <code>sliding</code>, or <code>refresh</code> however refresh tokens are not considered valid for authentication at this time. The claim name used to store the type can be customized by changing the <code>TOKEN_TYPE_CLAIM</code> setting.</p> <p>By default, Ninja JWT expects an <code>access</code> token to prove authentication. The allowed auth token types are determined by the value of the <code>AUTH_TOKEN_CLASSES</code> setting. This setting contains a list of dot paths to token classes. It includes the <code>'ninja_jwt.tokens.AccessToken'</code> dot path by default but may also include the <code>'ninja_jwt.tokens.SlidingToken'</code> dot path. Either or both of those dot paths may be present in the list of auth token classes. If they are both present, then both of those token types may be used to prove authentication.</p>"},{"location":"token_types/#sliding-tokens","title":"Sliding tokens","text":"<p>Sliding tokens offer a more convenient experience to users of tokens with the trade-offs of being less secure and, in the case that the blacklist app is being used, less performant. A sliding token is one which contains both an expiration claim and a refresh expiration claim. As long as the timestamp in a sliding token\\'s expiration claim has not passed, it can be used to prove authentication. Additionally, as long as the timestamp in its refresh expiration claim has not passed, it may also be submitted to a refresh view to get another copy of itself with a renewed expiration claim.</p> <p>If you want to use sliding tokens, change the <code>AUTH_TOKEN_CLASSES</code> setting to <code>('ninja_jwt.tokens.SlidingToken',)</code>. (Alternatively, the <code>AUTH_TOKEN_CLASSES</code> setting may include dot paths to both the <code>AccessToken</code> and <code>SlidingToken</code> token classes in the <code>ninja_jwt.tokens</code> module if you want to allow both token types to be used for authentication.)</p> <p>Also, register <code>NinjaJWTSlidingController</code> to the <code>api</code>: <pre><code>from ninja_jwt.controller import NinjaJWTSlidingController\nfrom ninja_extra import NinjaExtraAPI\n\napi = NinjaExtraAPI()\napi.register_controllers(NinjaJWTSlidingController)\n</code></pre></p> <p>Be aware that, if you are using the blacklist app, Ninja JWT will validate all sliding tokens against the blacklist for each authenticated request. This will reduce the performance of authenticated API views.</p>"}]}